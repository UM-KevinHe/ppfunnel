scale_y_continuous(name=ylab, limits=ylim, breaks=ybreaks, expand=yexpand) +
guides(shape=guide_legend(order=1), color=guide_legend(order=1),
linetype=guide_legend(reverse=T, order=2)) +
geom_hline(yintercept=target, size=lwd, linetype="dashed") +
labs(title=title) + theme_classic()
#'
#' @author Wenbo Wu and Kevin He
#'
#' @references
#' Spiegelhalter DJ (2004) "Funnel plots for comparing institutional
#' performance", *Stat Med* 24(8): 1185--1202 <https://doi.org/10.1002/sim.1970>.
#'
#' He K, Kalbfleisch JD, Li Y, and Li Y (2013) "Evaluating hospital readmission
#' rates in dialysis facilities; adjusting for hospital effects",
#' *Lifetime Data Anal* 19(4): 490--512 <https://doi.org/10.1007/s10985-013-9264-6>.
ppfunnel <- function(data, indiv.data=TRUE, outcome="poisson", indicator="ISR",
target=1, test="score", method="FE", q.winsor=c(0.05, 0.95),
levels=c(0.05, 0.01, 0.1),
flags=c("lower", "expected", "higher"),
colors=c('blue', '#E69F00', 'red'), xlab=NULL, ylab=NULL,
xlim=NULL, ylim=NULL, xexpand=waiver(), yexpand=waiver(),
xbreaks=waiver(), ybreaks=waiver(), ptsize=0.8, lwd=0.6,
title=waiver(), ...) {
if (!is.numeric(target)) stop("'target' is not numeric!")
if (!is.character(flags)) stop("'flags' is not character-valued!")
if (length(flags)!=3) stop("length of 'flags' unequal to 3!")
if (method %in% c("MOW", "MODW") &&
(!is.numeric(q.winsor) ||
length(q.winsor)!=2 ||
any(range(q.winsor)>1) ||
any(range(q.winsor)<0))) stop("'q.winsor' is invalid!")
if (indiv.data) {
if (!"ID"%in%names(data)) stop("'ID' not in 'data'!")
m <- length(unique(data %>% pull(ID)))
} else m <- NROW(data) # provider count
level <- levels[1L] # primary level for flagging
levels <- sort(levels) # levels for funnels
n.level <- length(levels) # level count
if (n.level>5) stop("'levels' greater than 5!")
# Poisson outcome
if (grepl("^pois", tolower(outcome))) { # lowercased 'outcome' starts with "pois"
if (!"data.frame"%in%class(data)) stop("Invalid class of 'data'!")
if (indicator=="ISR") { # indirectly standardized ratio
if (!all(c("O","E") %in% names(data))) stop("'O' or 'E' not in 'data'!")
if (indiv.data)
data <- data %>% group_by(ID) %>%
summarise(O=sum(O), E=sum(E), .groups="drop")
if (target<0) stop("'target' is negative!")
if (test=="score") {
if (method=="FE") {
tbl.flag <- data %>%
mutate(ind=O/E, stat=(O-target*E)/sqrt(target*E),
prec=E, prob.lower=pnorm(stat),
p=2*pmin(prob.lower, 1-prob.lower),
flag=ifelse(p<level,ifelse(ind>target,flags[3L],flags[1L]),
flags[2L]),
flag=factor(flag, flags))
tbl.ctrlim <- tibble(prec=tbl.flag %>% pull(prec) %>% rep(each=n.level),
dev=data %>% pull(E) %>% `^`(-1) %>% `*`(target) %>% sqrt %>%
rep(each=n.level),
level=levels %>% rep(times=m),
c.val=qnorm(1-level/2)) %>%
mutate(dev=c.val*dev, llim=pmax(target-dev,0), ulim=target+dev,
level=factor(level))
} else if (method=="indivEN.exact") {
tbl.flag <- data %>%
mutate(ind=O/E, stat=(O-target*E)/sqrt(target*E))
res.indivEN <-
indivEN.pois.exact(tbl.flag$stat, tbl.flag$E, target=target)
tbl.flag <- tbl.flag %>%
mutate(mean=sqrt(target)*res.indivEN[2]*sqrt(E),
sd=sqrt(res.indivEN[3]+
target*(res.indivEN[3]^4-res.indivEN[3]^2)*E),
stat=(stat-mean)/sd, prec=E,
prob.lower=pnorm(stat),
p=2*pmin(prob.lower, 1-prob.lower),
flag=ifelse(p<level,ifelse(ind>target,flags[3L],flags[1L]), flags[2L]),
flag=factor(flag, flags))
tbl.ctrlim <- tibble(prec=tbl.flag %>% pull(prec) %>% rep(each=n.level),
const=data %>% pull(E) %>% `^`(-1) %>% `*`(target) %>% sqrt %>%
rep(each=n.level),
mean=tbl.flag %>% pull(mean) %>% rep(each=n.level),
sd=tbl.flag %>% pull(sd) %>% rep(each=n.level),
level=levels %>% rep(times=m),
c.val=qnorm(1-level/2)) %>%
mutate(llim=pmax(target+const*(mean-c.val*sd),0),
ulim=target+const*(mean+c.val*sd),
level=factor(level))
} else if (method=="indivEN.approx") {
tbl.flag <- data %>%
mutate(ind=O/E, stat=(O-target*E)/sqrt(target*E))
res.indivEN <-
indivEN.pois.approx(tbl.flag$stat, tbl.flag$E, target=target)
tbl.flag <- tbl.flag %>%
mutate(mean=res.indivEN[2],
sd=sqrt(1+target*res.indivEN[3]*E),
stat=(stat-mean)/sd, prec=E,
prob.lower=pnorm(stat),
p=2*pmin(prob.lower, 1-prob.lower),
flag=ifelse(p<level,ifelse(ind>target,flags[3L],flags[1L]), flags[2L]),
flag=factor(flag, flags))
tbl.ctrlim <- tibble(prec=tbl.flag %>% pull(prec) %>% rep(each=n.level),
const=data %>% pull(E) %>% `^`(-1) %>%
`*`(target) %>% sqrt %>% rep(each=n.level),
mean=tbl.flag %>% pull(mean) %>% rep(each=n.level),
sd=tbl.flag %>% pull(sd) %>% rep(each=n.level),
level=levels %>% rep(times=m),
c.val=qnorm(1-level/2)) %>%
mutate(llim=pmax(target+const*(mean-c.val*sd),0),
ulim=target+const*(mean+c.val*sd),
level=factor(level))
} else if (method=="indivEN.0meanapprox") {
tbl.flag <- data %>%
mutate(ind=O/E, stat=(O-target*E)/sqrt(target*E))
res.indivEN <-
indivEN.pois.0meanapprox(tbl.flag$stat, tbl.flag$E, target=target)
tbl.flag <- tbl.flag %>%
mutate(sd=sqrt(1+target*res.indivEN[2]*E),
stat=stat/sd, prec=E,
prob.lower=pnorm(stat),
p=2*pmin(prob.lower, 1-prob.lower),
flag=ifelse(p<level,ifelse(ind>target,flags[3L],flags[1L]),flags[2L]),
flag=factor(flag, flags))
tbl.ctrlim <- tibble(prec=tbl.flag %>% pull(prec) %>% rep(each=n.level),
const=data %>% pull(E) %>% `^`(-1) %>%
`*`(target) %>% sqrt %>% rep(each=n.level),
sd=tbl.flag %>% pull(sd) %>% rep(each=n.level),
level=levels %>% rep(times=m),
c.val=qnorm(1-level/2)) %>%
mutate(llim=pmax(target-const*c.val*sd,0),
ulim=target+const*c.val*sd,
level=factor(level))
} else if (method=="MO") {
tbl.flag <- data %>%
mutate(ind=O/E, stat=(O-target*E)/sqrt(target*E))
phi <- pmax(tbl.flag %>% pull(stat) %>% `^`(2) %>% mean, 1)
tbl.flag <- tbl.flag %>%
mutate(stat=stat/sqrt(phi), prec=E,
prob.lower=pnorm(stat),
p=2*pmin(prob.lower, 1-prob.lower),
flag=ifelse(p<level,ifelse(ind>target,flags[3L],flags[1L]),flags[2L]),
flag=factor(flag, flags))
tbl.ctrlim <- tibble(prec=tbl.flag %>% pull(prec) %>% rep(each=n.level),
dev=data %>% pull(E) %>% `^`(-1) %>%
`*`(target*phi) %>% sqrt %>% rep(each=n.level),
level=levels %>% rep(times=m),
c.val=qnorm(1-level/2)) %>%
mutate(dev=c.val*dev, llim=pmax(target-dev,0), ulim=target+dev,
level=factor(level))
} else if (method=="MOW") {
tbl.flag <- data %>%
mutate(ind=O/E, stat=(O-target*E)/sqrt(target*E))
q.stat <- tbl.flag %>% pull(stat) %>% quantile(sort(q.winsor), T)
tbl.flag <- tbl.flag %>%
mutate(stat.w=pmax(pmin(stat, q.stat[2L]), q.stat[1L]))
phi <- pmax(tbl.flag %>% pull(stat.w) %>% `^`(2) %>% mean, 1)
tbl.flag <- tbl.flag %>%
mutate(stat=stat/sqrt(phi), prec=E,
prob.lower=pnorm(stat),
p=2*pmin(prob.lower, 1-prob.lower),
flag=ifelse(p<level,ifelse(ind>target,flags[3L],flags[1L]),
flags[2L]),
flag=factor(flag, flags))
tbl.ctrlim <- tibble(prec=tbl.flag %>% pull(prec) %>% rep(each=n.level),
dev=data %>% pull(E) %>% `^`(-1) %>%
`*`(target*phi) %>% sqrt %>% rep(each=n.level),
level=levels %>% rep(times=m),
c.val=qnorm(1-level/2)) %>%
mutate(dev=c.val*dev, llim=pmax(target-dev,0), ulim=target+dev,
level=factor(level))
} else if (method=="MODW") {
q.winsor <- sort(q.winsor)
tbl.flag <- data %>%
mutate(ind=O/E, stat=(O-target*E)/sqrt(target*E))
q.stat <- tbl.flag %>% pull(stat) %>% quantile(q.winsor, T)
tbl.flag <- tbl.flag %>%
mutate(stat.w=pmax(pmin(stat, q.stat[2L]), q.stat[1L]))
phi <- tbl.flag %>% pull(stat.w) %>% `^`(2) %>% mean
q.lower <- qnorm(q.winsor[1L])
q.upper <- qnorm(q.winsor[2L])
var.inctrl <-
1 + (q.lower*dnorm(q.lower)-q.upper*dnorm(q.upper)) /
(pnorm(q.upper)-pnorm(q.lower)) -
(dnorm(q.lower)-dnorm(q.upper))^2/(pnorm(q.upper)-pnorm(q.lower))^2
var.outofctrl <-
(q.lower^2-q.lower)*(q.winsor[1L])/sum(q.winsor[1L]+1-q.winsor[2L]) +
(q.upper^2-q.upper)*(1-q.winsor[2L])/sum(q.winsor[1L]+1-q.winsor[2L])
var <- (q.winsor[2L]-q.winsor[1L])*var.inctrl +
sum(q.winsor[1L]+1-q.winsor[2L])*var.outofctrl
phi <- pmax(phi/var, 1)
tbl.flag <- tbl.flag %>%
mutate(stat=stat/sqrt(phi), prec=E,
prob.lower=pnorm(stat),
p=2*pmin(prob.lower, 1-prob.lower),
flag=ifelse(p<level,ifelse(ind>target,flags[3L],flags[1L]),
flags[2L]),
flag=factor(flag, flags))
tbl.ctrlim <- tibble(prec=tbl.flag %>% pull(prec) %>% rep(each=n.level),
dev=data %>% pull(E) %>% `^`(-1) %>%
`*`(target*phi) %>% sqrt %>% rep(each=n.level),
level=levels %>% rep(times=m),
c.val=qnorm(1-level/2)) %>%
mutate(dev=c.val*dev, llim=pmax(target-dev,0), ulim=target+dev,
level=factor(level))
} else if (method=="AO") {
sum.weight <- data %>% pull(E) %>% sum %>% `/`(target)
sum.weightsq <- data %>% pull(E) %>% `^`(2) %>% sum %>% `/`(target^2)
tbl.flag <- data %>%
mutate(ind=O/E, stat=(O-target*E)/sqrt(target*E))
tausq <- tbl.flag %>% pull(stat) %>% `^`(2) %>% sum %>% `-`(m-1) %>%
`/`(sum.weight-sum.weightsq/sum.weight)
tbl.flag <- tbl.flag %>%
mutate(stat=(ind-target)/sqrt(tausq+target/E), prec=E,
prob.lower=pnorm(stat),
p=2*pmin(prob.lower, 1-prob.lower),
flag=ifelse(p<level,ifelse(ind>target,flags[3L],flags[1L]),
flags[2L]),
flag=factor(flag, flags))
tbl.ctrlim <- tibble(prec=tbl.flag %>% pull(prec) %>% rep(each=n.level),
dev=data %>% pull(E) %>% `^`(-1) %>%
`*`(target) %>% `+`(tausq) %>%
sqrt %>% rep(each=n.level),
level=levels %>% rep(times=m),
c.val=qnorm(1-level/2)) %>%
mutate(dev=c.val*dev, llim=pmax(target-dev,0), ulim=target+dev,
level=factor(level))
}
} else if (test=="exact") {
tbl.flag <- data %>%
mutate(ind=O/E, prec=E,
prob.lower=ppois(O,target*E)-0.5*dpois(O,target*E),
p=2*pmin(prob.lower, 1-prob.lower),
flag=ifelse(p<level,ifelse(ind>target,flags[3L],flags[1L]),
flags[2L]),
flag=factor(flag, flags))
tbl.ctrlim <- tibble(prec=tbl.flag %>% pull(prec) %>% rep(each=n.level),
E=prec, target.E=target*E,
level=levels %>% rep(times=m)) %>%
mutate(o.lower=qpois(level/2,target.E),
o.lower=ifelse(ppois(o.lower-1,target.E)+
0.5*dpois(o.lower,target.E)>=level/2,
o.lower,o.lower+1),
lambda.lower=(dpois(o.lower,target.E)+
2*ppois(o.lower-1,target.E)-level)/
(dpois(o.lower-1,target.E)+dpois(o.lower,target.E)),
llim=pmax(o.lower-lambda.lower,0)/E,
o.upper=qpois(1-level/2,target.E),
o.upper=ifelse(ppois(o.upper-1,target.E)+
0.5*dpois(o.upper,target.E)>=1-level/2,
o.upper,o.upper+1),
lambda.upper=(dpois(o.upper,target.E)+
2*ppois(o.upper-1,target.E)-2+level)/
(dpois(o.upper-1,target.E)+dpois(o.upper,target.E)),
ulim=(o.upper-lambda.upper)/E,
level=factor(level))
}
if (is.null(ylim)) ylim <- c(0, max(tbl.flag %>% pull(ind)))
} else if (indicator=="DSR") { # directly standardized ratio
if (target<0) stop("'target' is negative!")
} else if (indicator=="Prop") {
}
} else if (grepl("^bern", tolower(outcome))) { # Bernoulli outcome
if (!"data.frame"%in%class(data)) stop("Invalid class of 'data'!")
if (indicator=="ISR") { # indirectly standardized ratio
if (!all(c("O","E") %in% names(data))) stop("'O' or 'E' not in 'data'!")
if (indiv.data) {
ls.probs <- split(data %>% pull(E), data %>% pull(ID)) %>% unname
data <- data %>% group_by(ID) %>%
summarise(O=sum(O), E=sum(E), .groups="drop") %>%
mutate(probs=ls.probs)
} else {
if (!"probs" %in% names(data)) stop("'probs' not in 'data'!")
if (!"ID" %in% names(data))
data <- data %>% mutate(ID=as.character(1:n()))
}
if (test=="score") {
if (method=="FE") {
tbl.flag <- data %>% rowwise() %>%
mutate(probs=list(target*unlist(probs)),
V=max(sum(unlist(probs)*(1-unlist(probs))), 0.001),
N=length(unlist(probs)),
ind=O/E, stat=(O-target*E)/sqrt(V),
prec=E^2/V, prob.lower=pnorm(stat),
p=2*pmin(prob.lower, 1-prob.lower),
flag=ifelse(p<level,ifelse(ind>target,flags[3L],flags[1L]),
flags[2L]),
flag=factor(flag, flags))
tbl.ctrlim <-
tibble(prec=tbl.flag %>% pull(prec) %>% rep(each=n.level),
N=tbl.flag %>% pull(N) %>% rep(each=n.level),
dev=1/sqrt(prec),
level=levels %>% rep(times=m),
c.val=qnorm(1-level/2)) %>%
mutate(dev=c.val*dev, llim=pmax(target-dev,0),
ulim=pmin(target+dev,N),
level=factor(level))
} else if (method=="indivEN.exact") {
} else if (method=="indivEN.approx") {
} else if (method=="indivEN.0meanapprox") {
} else if (method=="MO") {
} else if (method=="MOW") {
} else if (method=="MODW") {
} else if (method=="AO") {
}
} else if (test=="exact") {
tbl.flag <- data %>% rowwise() %>%
mutate(probs=list(target*unlist(probs)),
V=max(sum(unlist(probs)*(1-unlist(probs))), 0.001),
N=length(unlist(probs)),
ind=O/E, prec=E^2/V,
prob.lower=ppoibin(O,unlist(probs))-0.5*dpoibin(O,unlist(probs)),
p=2*pmin(prob.lower,1-prob.lower),
flag=ifelse(p<level,ifelse(ind>target,flags[3L],flags[1L]),
flags[2L]),
flag=factor(flag, flags))
tbl.ctrlim <- tibble(prec=tbl.flag %>% pull(prec) %>% rep(each=n.level),
E=tbl.flag %>% pull(E) %>% rep(each=n.level),
N=tbl.flag %>% pull(N) %>% rep(each=n.level),
probs=tbl.flag %>% pull(probs) %>% rep(each=n.level),
level=levels %>% rep(times=m)) %>% rowwise() %>%
mutate(o.lower=qpoibin(level/2,unlist(probs)),
o.lower=ifelse(ppoibin(o.lower-1,unlist(probs))+
0.5*dpoibin(o.lower,unlist(probs))>=level/2,
o.lower,o.lower+1),
lambda.lower=(dpoibin(o.lower,unlist(probs))+
2*ppoibin(o.lower-1,unlist(probs))-level)/
(dpoibin(o.lower-1,unlist(probs))+dpoibin(o.lower,unlist(probs))),
llim=pmax(o.lower-lambda.lower,0)/E,
o.upper=qpoibin(1-level/2,unlist(probs)),
o.upper=ifelse(ppoibin(o.upper-1,unlist(probs))+
0.5*dpoibin(o.upper,unlist(probs))>=1-level/2,
o.upper,o.upper+1),
lambda.upper=(dpoibin(o.upper,unlist(probs))+
2*ppoibin(o.upper-1,unlist(probs))-2+level)/
(dpoibin(o.upper-1,unlist(probs))+dpoibin(o.upper,unlist(probs))),
ulim=pmin(o.upper-lambda.upper,N)/E,
level=factor(level))
}
} else if (indicator=="DSR") { # directly standardized ratio
} else if (indicator=="Prop") {
}
}
labs.colorshape <- tbl.flag %>% pull(flag) %>% table %>%
paste0(flags, "|", ., "|", round(prop.table(.)*100), "%")
labs.linetype <- paste0((1-levels)*100,"%")
vals.linetype <- character(n.level)
vals.linetype[levels==level] <- 'solid'
vals.linetype[levels!=level] <-
c('dashed','dotted','dotdash','longdash','twodash')[1:(n.level-1)]
ggplot() +
geom_point(data=tbl.flag, aes(x=prec, y=ind, color=flag, shape=flag),
size=ptsize) +
scale_shape_manual(name=bquote("flagging "~(alpha==.(level))),
labels=labs.colorshape, values=c(15,17,19)) +
scale_color_manual(name=bquote("flagging "~(alpha==.(level))),
labels=labs.colorshape, values=colors) +
geom_line(data=tbl.ctrlim, aes(x=prec, y=llim, group=level, linetype=level),
size=lwd) +
geom_line(data=tbl.ctrlim, aes(x=prec, y=ulim, group=level, linetype=level),
size=lwd) +
scale_linetype_manual(name="ctrl limits", values=vals.linetype,
labels=labs.linetype) +
scale_x_continuous(name=xlab, limits=xlim, breaks=xbreaks, expand=xexpand) +
scale_y_continuous(name=ylab, limits=ylim, breaks=ybreaks, expand=yexpand) +
guides(shape=guide_legend(order=1), color=guide_legend(order=1),
linetype=guide_legend(reverse=T, order=2)) +
geom_hline(yintercept=target, size=lwd, linetype="dashed") +
labs(title=title) + theme_classic() + theme(...)
}
head(df)
df %>% ppfunnel(outcome="bern")
df %>% ppfunnel(outcome="bern", test="exact")
funnel.SRR <- function(input.dis, input.prov, target=1, alphas=c(0.1, 0.05, 0.01),
type="FE.score", file, plt.title, sigma.b=NULL) {
# input.dis: a data frame consisting of discharge-specific inputs and provider ID
# input.prov: a data frame consisting of provider-specific inputs ordered by provider ID
# target
# alphas
# type
# file
# sigma.b
if (length(unique(input.dis$ID))!=NROW(input.prov))
stop("Number of unique provider IDs NOT equal to length of indicator vector!",.call=F)
n <- length(alphas); m <- NROW(input.prov); alphas <- alphas[order(alphas)]
mean.obs.prov <- as.numeric(sapply(split(input.dis$prob,input.dis$ID),sum))
var.obs.prov <- as.numeric(sapply(split(input.dis$prob*(1-input.dis$prob),input.dis$ID),sum))
if (grepl("FE.",type)) {
se.SRR <- sqrt(var.obs.prov) / mean.obs.prov
}  else if (grepl("FERE.",type)) {
if (is.null(sigma.b)) stop("Arugument 'sigma.b' NOT as required!")
se.SRR <- sqrt(var.obs.prov * (1+sigma.b*var.obs.prov)) / mean.obs.prov
}
if (grepl("exact",type) | grepl("score",type)) {
xmax <- max(se.SRR^{-2})
order.prec <- order(se.SRR, decreasing=T)
input.prov <- input.prov[order.prec,]; se.SRR <- se.SRR[order.prec]
data <- data.frame(precision=se.SRR^{-2}, indicator=input.prov$SRR, flag=input.prov$flag)
ctrl.limits <- data.frame(precision=rep(se.SRR^{-2}, each=n), alpha=rep(alphas, times=m),
exp=rep(mean.obs.prov[order.prec], each=n))
} else if (grepl("Wald",type)) {
xmax <- max(se.SRR^{-2})
var.obs.prov2 <- as.numeric(sapply(split(input.dis$pred*(1-input.dis$pred),input.dis$ID),sum))
se.wald <- sqrt(var.obs.prov2)/mean.obs.prov
order.prec <- order(se.wald, decreasing=T)
input.prov <- input.prov[order.prec,]
se.wald <- se.wald[order.prec]
se.SRR <- se.SRR[order.prec]
data <- data.frame(precision=pmin((se.wald)^{-2},xmax), indicator=input.prov$SRR, flag=input.prov$flag)
ctrl.limits <- data.frame(precision=rep(pmin((se.wald)^{-2},xmax), each=n),
dev=rep(se.wald, each=n),
alpha=rep(alphas, times=m))
}
if (grepl("score",type)) {
ctrl.limits$upper <- target+qnorm(1-ctrl.limits$alpha/2)*sqrt(1/ctrl.limits$precision)
ctrl.limits$lower <- target-qnorm(1-ctrl.limits$alpha/2)*sqrt(1/ctrl.limits$precision)
} else if (grepl("Wald",type)) {
ctrl.limits$upper <- target+qnorm(1-ctrl.limits$alpha/2)*sqrt(1/ctrl.limits$precision)
ctrl.limits$lower <- target-qnorm(1-ctrl.limits$alpha/2)*sqrt(1/ctrl.limits$precision)
} else if (grepl("exact",type)) {
CL.obs <- function(df) {
aux <- function(alpha) {
# lower CL for obs
o <- qpoibin(alpha/2, df$prob)
o <- ifelse(ppoibin(o-1,df$prob)+0.5*dpoibin(o,df$prob)>=alpha/2, o, o+1)
lambda <- (dpoibin(o,df$prob)+2*ppoibin(o-1,df$prob)-alpha) /
(dpoibin(o,df$prob)+dpoibin(o-1,df$prob))
lower <- pmax(o-lambda,0)
# upper CL for obs
o <- qpoibin(1-alpha/2, df$prob)
o <- ifelse(ppoibin(o-1,df$prob)+0.5*dpoibin(o,df$prob)>=1-alpha/2, o, o+1)
lambda <- (dpoibin(o,df$prob)+2*ppoibin(o-1,df$prob)-2+alpha) /
(dpoibin(o-1,df$prob)+dpoibin(o,df$prob))
upper <- pmin(o-lambda, length(df$prob))
return(c(lower, upper))
}
return(as.vector(t(sapply(alphas, FUN=aux))))
}
mat <- unname(sapply(by(input.dis,input.dis[,"ID"],identity),FUN=function(df) CL.obs(df)))[,order.prec]
ctrl.limits$lower <- as.vector(mat[1:n,]) / ctrl.limits$exp
ctrl.limits$upper <- as.vector(mat[(n+1):(2*n),]) / ctrl.limits$exp
}
ctrl.limits$alpha <- factor(ctrl.limits$alpha)
ctrl.limits$lower <- pmax(ctrl.limits$lower, 0)
ymax <- max(input.prov$SRR)
labs.color <- paste0(
#levels(input.prov$flag),
c("better", "expected", "worse")[as.numeric(names(summary(input.prov$flag)))+2],
#" (",round((summary(input.prov$flag)/m*100),digits=2),"%)")
" (",summary(input.prov$flag),")")
labs.linetype <- paste0((1-alphas)*100,"%")
values.linetype <- c('dashed','dotted','dotdash','longdash','twodash')[1:length(alphas)]
values.linetype[alphas==0.05] <- 'solid'
ggplot() + theme_classic() +
theme(legend.justification=c(1,1), legend.position=c(1,1),
legend.box="horizontal",legend.text=element_text(size=14),
axis.title=element_text(size=14, margin=margin(t=0,r=0,b=0,l=0)),
axis.text=element_text(size=14),
plot.title=element_text(hjust=0.5), text=element_text(size=13)) +
scale_x_continuous(name="Precision (effective provider size)", limits=c(0, xmax),
expand=c(1,1)/50) +
scale_y_continuous(name="Outcome indicator (postop VTE)", breaks=round(seq(0,ymax,by=1),1), limits=c(0, ymax),
expand=c(1,1)/50) +
#labs(title=ifelse(missing(plt.title),waiver(),plt.title)) +
geom_point(data=data, aes(x=precision, y=indicator, color=flag, shape=flag), size=1.5, alpha=1) + # "#619CFF"
scale_shape_manual(name=bquote("Flagging "~(alpha==0.05)), labels=labs.color,
values=c(15,17,19)[as.numeric(names(summary(input.prov$flag)))+2]) +
scale_color_manual(name=bquote("Flagging "~(alpha==0.05)), labels=labs.color,
values=c('blue','#E69F00', 'red')[as.numeric(names(summary(input.prov$flag)))+2]) +
geom_line(data=ctrl.limits, aes(x=precision, y=lower, group=alpha, linetype=alpha), size=.6) +
geom_line(data=ctrl.limits, aes(x=precision, y=upper, group=alpha, linetype=alpha), size=.6) +
scale_linetype_manual(name="Ctrl limits", values=values.linetype, labels=labs.linetype) +
guides(shape=guide_legend(order=1), color=guide_legend(order=1), linetype=guide_legend(reverse=TRUE, order=2)) +
geom_hline(yintercept=target, size=.6, linetype="dashed") # color="#F8766D"
#ggsave(file, width=8, height=8)
#return(list(se.SRR, se.wald))
}
target <- 1
alphas <- c(0.01, 0.05, 0.1)
input.dis <- data.frame(ID=df$ID, prob=df$E)
input.prov <- data.frame(SRR=df.hosp$SVTER, flag=exact.fe$flag)
df.hosp <- df %>% group_by(ID) %>%
summarise(E=sum(E), O=sum(O),
.groups="drop") %>%
mutate(SVTER=O/E)
alpha <- 0.05
exact.poisbinom <- function(df) {
obs <- sum(df$O)
p <- 1 - ppoibin(obs, df$E) + 0.5*dpoibin(obs, df$E)
z.score <- qnorm(p, lower=F)
flag <- ifelse(p<alpha/2, 1, ifelse(p<=1-alpha/2, 0, -1))
p.val <- 2 * min(p, 1-p)
return(c(flag, p.val, z.score))
}
results <- sapply(by(df, df$ID, identity),
FUN=function(x) exact.poisbinom(x))
exact.fe <- data.frame(flag=factor(results[1,]), p=results[2,], stat=results[3,],
row.names=colnames(results))
target <- 1
alphas <- c(0.01, 0.05, 0.1)
input.dis <- data.frame(ID=df$ID, prob=df$E)
input.prov <- data.frame(SRR=df.hosp$SVTER, flag=exact.fe$flag)
funnel.FE.exact <-
funnel.SRR(input.dis, input.prov, target, alphas, type="FE.exact",
file=paste0("./ED_30_funnel_exact_", Sys.Date(),".pdf"), plt.title=NULL)
funnel.FE.exact
df %>% ppfunnel(outcome="bern", levels=0.05)
df %>% ppfunnel(outcome="bern", test="exact", levels=0.05)
data()
head(df)
eVTEp <- df
save(eVTEp, file="local/eVTEp.rda")
library(ppfunnel)
